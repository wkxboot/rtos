
uxos.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000009ba  00000a4e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000051  00800068  00800068  00000a56  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a56  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001e0  00000000  00000000  00000a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001a2f  00000000  00000000  00000c66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000cc0  00000000  00000000  00002695  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a08  00000000  00000000  00003355  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000460  00000000  00000000  00003d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000072c  00000000  00000000  000041c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012e7  00000000  00000000  000048ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000178  00000000  00000000  00005bd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	87 c3       	rjmp	.+1806   	; 0x722 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea eb       	ldi	r30, 0xBA	; 186
  3a:	f9 e0       	ldi	r31, 0x09	; 9
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a8 36       	cpi	r26, 0x68	; 104
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a8 e6       	ldi	r26, 0x68	; 104
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a9 3b       	cpi	r26, 0xB9	; 185
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	57 d2       	rcall	.+1198   	; 0x508 <main>
  5a:	ad c4       	rjmp	.+2394   	; 0x9b6 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <hal_key_register_for_task>:
uint8_t hal_key_register_id=0xff;
key_control_t key_control[KEY_MAX];

void hal_key_register_for_task(uint8_t task_id)
{
	if (hal_key_register_id==0xff)
  5e:	90 91 60 00 	lds	r25, 0x0060
  62:	9f 3f       	cpi	r25, 0xFF	; 255
  64:	11 f4       	brne	.+4      	; 0x6a <hal_key_register_for_task+0xc>
	{
		hal_key_register_id=task_id;
  66:	80 93 60 00 	sts	0x0060, r24
  6a:	08 95       	ret

0000006c <hal_check_key_port>:
	return temp_key;
	
}

void hal_check_key_port(void)
{
  6c:	af 92       	push	r10
  6e:	bf 92       	push	r11
  70:	cf 92       	push	r12
  72:	df 92       	push	r13
  74:	ef 92       	push	r14
  76:	ff 92       	push	r15
  78:	0f 93       	push	r16
  7a:	1f 93       	push	r17
  7c:	cf 93       	push	r28
  7e:	df 93       	push	r29


static uint8_t hal_read_key_port()
{
	uint8_t temp_key;
	temp_key=KEY_PIN;
  80:	16 b3       	in	r17, 0x16	; 22
	uint32_t current_clock;
	uint32_t interval=0;
	uint8_t temp_key;
	temp_key=hal_read_key_port();
	
	ENTER_CRITICAL_SECTION();
  82:	f8 94       	cli
	current_clock=uxos_get_sysclock();
  84:	95 d3       	rcall	.+1834   	; 0x7b0 <uxos_get_sysclock>
  86:	6b 01       	movw	r12, r22
  88:	7c 01       	movw	r14, r24
	EXIT_CRITICAL_SECTION();
  8a:	78 94       	sei
  8c:	c8 e7       	ldi	r28, 0x78	; 120
  8e:	d0 e0       	ldi	r29, 0x00	; 0
				}
			}
		}//end of if (!(temp_key&key_control[key_idx].value))
		else
		{
			key_control[key_idx].state=KEY_DOWN_UP;
  90:	02 e0       	ldi	r16, 0x02	; 2
			}
			else if(key_control[key_idx].state==KEY_PRESS )//如果上一次检测的状态是KEY_PRESS按键按下
			{
				if (interval>=KEY_LONG_PRESS_TIME)//如果按键时间大于长按键时间
				{
					key_control[key_idx].state=KEY_PRESS_HOLD;//此时状态更新为KEY_PRESS_HOLD长按键
  92:	84 e0       	ldi	r24, 0x04	; 4
  94:	b8 2e       	mov	r11, r24
		{
			interval=current_clock-key_control[key_idx].time_stamp;//读取与上次状态之间的间隔时间差
			
			if (key_control[key_idx].state==KEY_DOWN_UP)//如果上一次检测的状态是DOWN_UP
			{
				key_control[key_idx].state=KEY_PRESS ;//那么此时状态为按键按下
  96:	93 e0       	ldi	r25, 0x03	; 3
  98:	a9 2e       	mov	r10, r25
  9a:	fe 01       	movw	r30, r28
  9c:	31 97       	sbiw	r30, 0x01	; 1
	current_clock=uxos_get_sysclock();
	EXIT_CRITICAL_SECTION();
	
	for (uint8_t key_idx=0;key_idx<KEY_MAX;key_idx++)
	{
		if (!(temp_key&key_control[key_idx].value))//当前按键按下
  9e:	80 81       	ld	r24, Z
  a0:	81 23       	and	r24, r17
  a2:	f1 f5       	brne	.+124    	; 0x120 <hal_check_key_port+0xb4>
		{
			interval=current_clock-key_control[key_idx].time_stamp;//读取与上次状态之间的间隔时间差
  a4:	89 81       	ldd	r24, Y+1	; 0x01
  a6:	9a 81       	ldd	r25, Y+2	; 0x02
  a8:	ab 81       	ldd	r26, Y+3	; 0x03
  aa:	bc 81       	ldd	r27, Y+4	; 0x04
			
			if (key_control[key_idx].state==KEY_DOWN_UP)//如果上一次检测的状态是DOWN_UP
  ac:	28 81       	ld	r18, Y
  ae:	22 30       	cpi	r18, 0x02	; 2
  b0:	11 f4       	brne	.+4      	; 0xb6 <hal_check_key_port+0x4a>
			{
				key_control[key_idx].state=KEY_PRESS ;//那么此时状态为按键按下
  b2:	a8 82       	st	Y, r10
  b4:	19 c0       	rjmp	.+50     	; 0xe8 <hal_check_key_port+0x7c>
	
	for (uint8_t key_idx=0;key_idx<KEY_MAX;key_idx++)
	{
		if (!(temp_key&key_control[key_idx].value))//当前按键按下
		{
			interval=current_clock-key_control[key_idx].time_stamp;//读取与上次状态之间的间隔时间差
  b6:	b7 01       	movw	r22, r14
  b8:	a6 01       	movw	r20, r12
  ba:	48 1b       	sub	r20, r24
  bc:	59 0b       	sbc	r21, r25
  be:	6a 0b       	sbc	r22, r26
  c0:	7b 0b       	sbc	r23, r27
  c2:	db 01       	movw	r26, r22
  c4:	ca 01       	movw	r24, r20
			if (key_control[key_idx].state==KEY_DOWN_UP)//如果上一次检测的状态是DOWN_UP
			{
				key_control[key_idx].state=KEY_PRESS ;//那么此时状态为按键按下
				key_control[key_idx].time_stamp=current_clock;//更新时间戳
			}
			else if(key_control[key_idx].state==KEY_PRESS )//如果上一次检测的状态是KEY_PRESS按键按下
  c6:	23 30       	cpi	r18, 0x03	; 3
  c8:	39 f4       	brne	.+14     	; 0xd8 <hal_check_key_port+0x6c>
			{
				if (interval>=KEY_LONG_PRESS_TIME)//如果按键时间大于长按键时间
  ca:	80 3d       	cpi	r24, 0xD0	; 208
  cc:	97 40       	sbci	r25, 0x07	; 7
  ce:	a1 05       	cpc	r26, r1
  d0:	b1 05       	cpc	r27, r1
  d2:	70 f0       	brcs	.+28     	; 0xf0 <hal_check_key_port+0x84>
				{
					key_control[key_idx].state=KEY_PRESS_HOLD;//此时状态更新为KEY_PRESS_HOLD长按键
  d4:	b8 82       	st	Y, r11
  d6:	08 c0       	rjmp	.+16     	; 0xe8 <hal_check_key_port+0x7c>
					key_control[key_idx].time_stamp=current_clock;//更新时间戳
				}
			}
			else if (key_control[key_idx].state==KEY_PRESS_HOLD)//如果上一次检测的状态是KEY_PRESS_HOLD长按键
  d8:	24 30       	cpi	r18, 0x04	; 4
  da:	51 f4       	brne	.+20     	; 0xf0 <hal_check_key_port+0x84>
			{
				if (interval>=KEY_LONG_PRESS_PERIOD)//如果时间大于长按键触发周期
  dc:	4a 3f       	cpi	r20, 0xFA	; 250
  de:	51 05       	cpc	r21, r1
  e0:	61 05       	cpc	r22, r1
  e2:	71 05       	cpc	r23, r1
  e4:	28 f0       	brcs	.+10     	; 0xf0 <hal_check_key_port+0x84>
				{
					key_control[key_idx].state=KEY_PRESS_HOLD;//保持长按键状态
  e6:	28 83       	st	Y, r18
					key_control[key_idx].time_stamp=current_clock;//更新时间戳
  e8:	c9 82       	std	Y+1, r12	; 0x01
  ea:	da 82       	std	Y+2, r13	; 0x02
  ec:	eb 82       	std	Y+3, r14	; 0x03
  ee:	fc 82       	std	Y+4, r15	; 0x04
				}
			}
			if (key_control[key_idx].time_stamp==current_clock)//如果时间戳和当前时间相等 表示是新状态
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
  f4:	ab 81       	ldd	r26, Y+3	; 0x03
  f6:	bc 81       	ldd	r27, Y+4	; 0x04
  f8:	8c 15       	cp	r24, r12
  fa:	9d 05       	cpc	r25, r13
  fc:	ae 05       	cpc	r26, r14
  fe:	bf 05       	cpc	r27, r15
 100:	81 f4       	brne	.+32     	; 0x122 <hal_check_key_port+0xb6>
			{
				uxos_msg_t *pkey_hold_msg=uxos_mem_alloc(sizeof(uxos_msg_t));
 102:	88 e0       	ldi	r24, 0x08	; 8
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	4a d2       	rcall	.+1172   	; 0x59c <uxos_mem_alloc>
 108:	bc 01       	movw	r22, r24
				if (pkey_hold_msg )//send the key_hold_msg to process task
 10a:	00 97       	sbiw	r24, 0x00	; 0
 10c:	51 f0       	breq	.+20     	; 0x122 <hal_check_key_port+0xb6>
				{
					pkey_hold_msg->event_flag=key_control[key_idx].state;
 10e:	88 81       	ld	r24, Y
 110:	fb 01       	movw	r30, r22
 112:	81 83       	std	Z+1, r24	; 0x01
					pkey_hold_msg->task_id=hal_key_register_id;
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	80 83       	st	Z, r24
					uxos_send_msg(hal_key_register_id,pkey_hold_msg,SYS_EVENT_MSG);
 11a:	40 e8       	ldi	r20, 0x80	; 128
 11c:	af d2       	rcall	.+1374   	; 0x67c <uxos_send_msg>
 11e:	01 c0       	rjmp	.+2      	; 0x122 <hal_check_key_port+0xb6>
				}
			}
		}//end of if (!(temp_key&key_control[key_idx].value))
		else
		{
			key_control[key_idx].state=KEY_DOWN_UP;
 120:	08 83       	st	Y, r16
 122:	26 96       	adiw	r28, 0x06	; 6
	
	ENTER_CRITICAL_SECTION();
	current_clock=uxos_get_sysclock();
	EXIT_CRITICAL_SECTION();
	
	for (uint8_t key_idx=0;key_idx<KEY_MAX;key_idx++)
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	c4 38       	cpi	r28, 0x84	; 132
 128:	df 07       	cpc	r29, r31
 12a:	09 f0       	breq	.+2      	; 0x12e <hal_check_key_port+0xc2>
 12c:	b6 cf       	rjmp	.-148    	; 0x9a <hal_check_key_port+0x2e>
		else
		{
			key_control[key_idx].state=KEY_DOWN_UP;
		}
	}//end of for(....)
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	ff 90       	pop	r15
 138:	ef 90       	pop	r14
 13a:	df 90       	pop	r13
 13c:	cf 90       	pop	r12
 13e:	bf 90       	pop	r11
 140:	af 90       	pop	r10
 142:	08 95       	ret

00000144 <hal_led_register_for_task>:
led_control_t led_control[LEDS_MAX];
uint8_t hal_led_register_id=0xff;

void hal_led_register_for_task(uint8_t task_id) //register only once
{
	if (hal_led_register_id==0xff)
 144:	90 91 61 00 	lds	r25, 0x0061
 148:	9f 3f       	cpi	r25, 0xFF	; 255
 14a:	11 f4       	brne	.+4      	; 0x150 <hal_led_register_for_task+0xc>
	{
		hal_led_register_id=task_id;
 14c:	80 93 61 00 	sts	0x0061, r24
 150:	08 95       	ret

00000152 <hal_led_turn_on_off>:


void hal_led_turn_on_off(uint8_t led_idx,uint8_t set_state)
{
	uint8_t led_bit;
	if (led_idx<LEDS_MAX)
 152:	84 30       	cpi	r24, 0x04	; 4
 154:	c0 f4       	brcc	.+48     	; 0x186 <hal_led_turn_on_off+0x34>
	{
		led_control[led_idx].current_state=set_state;
 156:	9d e0       	ldi	r25, 0x0D	; 13
 158:	89 9f       	mul	r24, r25
 15a:	f0 01       	movw	r30, r0
 15c:	11 24       	eor	r1, r1
 15e:	ed 57       	subi	r30, 0x7D	; 125
 160:	ff 4f       	sbci	r31, 0xFF	; 255
 162:	62 83       	std	Z+2, r22	; 0x02
		led_bit=led_control[led_idx].bit_in_port;
 164:	30 81       	ld	r19, Z
		if (set_state==LED_ON)
		{
			LED_TURN_ON(led_bit);
 166:	28 b3       	in	r18, 0x18	; 24
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	03 2e       	mov	r0, r19
 16e:	01 c0       	rjmp	.+2      	; 0x172 <hal_led_turn_on_off+0x20>
 170:	88 0f       	add	r24, r24
 172:	0a 94       	dec	r0
 174:	ea f7       	brpl	.-6      	; 0x170 <hal_led_turn_on_off+0x1e>
	uint8_t led_bit;
	if (led_idx<LEDS_MAX)
	{
		led_control[led_idx].current_state=set_state;
		led_bit=led_control[led_idx].bit_in_port;
		if (set_state==LED_ON)
 176:	61 30       	cpi	r22, 0x01	; 1
 178:	21 f4       	brne	.+8      	; 0x182 <hal_led_turn_on_off+0x30>
		{
			LED_TURN_ON(led_bit);
 17a:	80 95       	com	r24
 17c:	82 23       	and	r24, r18
 17e:	88 bb       	out	0x18, r24	; 24
 180:	08 95       	ret
		}
		else
		{
			LED_TURN_OFF(led_bit);
 182:	28 2b       	or	r18, r24
 184:	28 bb       	out	0x18, r18	; 24
 186:	08 95       	ret

00000188 <hal_led_blink>:
		}		
	}	
}

void hal_led_blink(uint8_t led_idx,uint16_t num_blinks,uint8_t percent,uint16_t period)// period unit is ms
{
 188:	cf 92       	push	r12
 18a:	df 92       	push	r13
 18c:	ef 92       	push	r14
 18e:	ff 92       	push	r15
 190:	0f 93       	push	r16
 192:	1f 93       	push	r17
 194:	cf 93       	push	r28
 196:	df 93       	push	r29
 198:	89 01       	movw	r16, r18
	uint32_t current_clock;
	if (led_idx>LEDS_MAX)
 19a:	85 30       	cpi	r24, 0x05	; 5
 19c:	08 f0       	brcs	.+2      	; 0x1a0 <hal_led_blink+0x18>
 19e:	63 c0       	rjmp	.+198    	; 0x266 <hal_led_blink+0xde>
	{
		return ;
	}
	if (period && percent)
 1a0:	21 15       	cp	r18, r1
 1a2:	31 05       	cpc	r19, r1
 1a4:	09 f4       	brne	.+2      	; 0x1a8 <hal_led_blink+0x20>
 1a6:	4d c0       	rjmp	.+154    	; 0x242 <hal_led_blink+0xba>
 1a8:	44 23       	and	r20, r20
 1aa:	09 f4       	brne	.+2      	; 0x1ae <hal_led_blink+0x26>
 1ac:	4a c0       	rjmp	.+148    	; 0x242 <hal_led_blink+0xba>
	{
		if (percent<100)
 1ae:	44 36       	cpi	r20, 0x64	; 100
 1b0:	08 f0       	brcs	.+2      	; 0x1b4 <hal_led_blink+0x2c>
 1b2:	45 c0       	rjmp	.+138    	; 0x23e <hal_led_blink+0xb6>
		{
			led_control[led_idx].current_mode=LED_BLINK_MODE;
 1b4:	c8 2f       	mov	r28, r24
 1b6:	d0 e0       	ldi	r29, 0x00	; 0
 1b8:	9d e0       	ldi	r25, 0x0D	; 13
 1ba:	89 9f       	mul	r24, r25
 1bc:	f0 01       	movw	r30, r0
 1be:	11 24       	eor	r1, r1
 1c0:	ed 57       	subi	r30, 0x7D	; 125
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	81 e0       	ldi	r24, 0x01	; 1
 1c6:	81 83       	std	Z+1, r24	; 0x01
			led_control[led_idx].remain_changes=(num_blinks<<1);
 1c8:	66 0f       	add	r22, r22
 1ca:	77 1f       	adc	r23, r23
 1cc:	74 83       	std	Z+4, r23	; 0x04
 1ce:	63 83       	std	Z+3, r22	; 0x03
			led_control[led_idx].on_time=percent*period/100;
 1d0:	42 9f       	mul	r20, r18
 1d2:	c0 01       	movw	r24, r0
 1d4:	43 9f       	mul	r20, r19
 1d6:	90 0d       	add	r25, r0
 1d8:	11 24       	eor	r1, r1
 1da:	64 e6       	ldi	r22, 0x64	; 100
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	d7 d3       	rcall	.+1966   	; 0x98e <__udivmodhi4>
 1e0:	76 83       	std	Z+6, r23	; 0x06
 1e2:	65 83       	std	Z+5, r22	; 0x05
			led_control[led_idx].period=period;
 1e4:	30 87       	std	Z+8, r19	; 0x08
 1e6:	27 83       	std	Z+7, r18	; 0x07
			ENTER_CRITICAL_SECTION();
 1e8:	f8 94       	cli
			current_clock=uxos_get_sysclock();
 1ea:	e2 d2       	rcall	.+1476   	; 0x7b0 <uxos_get_sysclock>
			EXIT_CRITICAL_SECTION();
 1ec:	78 94       	sei
			if (led_control[led_idx].current_state==LED_ON)
 1ee:	2d e0       	ldi	r18, 0x0D	; 13
 1f0:	2c 9f       	mul	r18, r28
 1f2:	f0 01       	movw	r30, r0
 1f4:	2d 9f       	mul	r18, r29
 1f6:	f0 0d       	add	r31, r0
 1f8:	11 24       	eor	r1, r1
 1fa:	ed 57       	subi	r30, 0x7D	; 125
 1fc:	ff 4f       	sbci	r31, 0xFF	; 255
 1fe:	42 81       	ldd	r20, Z+2	; 0x02
 200:	25 81       	ldd	r18, Z+5	; 0x05
 202:	36 81       	ldd	r19, Z+6	; 0x06
 204:	41 30       	cpi	r20, 0x01	; 1
 206:	59 f4       	brne	.+22     	; 0x21e <hal_led_blink+0x96>
			{
				led_control[led_idx].next=current_clock+led_control[led_idx].on_time;
 208:	ab 01       	movw	r20, r22
 20a:	bc 01       	movw	r22, r24
 20c:	42 0f       	add	r20, r18
 20e:	53 1f       	adc	r21, r19
 210:	61 1d       	adc	r22, r1
 212:	71 1d       	adc	r23, r1
 214:	41 87       	std	Z+9, r20	; 0x09
 216:	52 87       	std	Z+10, r21	; 0x0a
 218:	63 87       	std	Z+11, r22	; 0x0b
 21a:	74 87       	std	Z+12, r23	; 0x0c
 21c:	14 c0       	rjmp	.+40     	; 0x246 <hal_led_blink+0xbe>
			}
			else
			{
				led_control[led_idx].next=current_clock+period-led_control[led_idx].on_time;
 21e:	68 01       	movw	r12, r16
 220:	e1 2c       	mov	r14, r1
 222:	f1 2c       	mov	r15, r1
 224:	c2 1a       	sub	r12, r18
 226:	d3 0a       	sbc	r13, r19
 228:	e1 08       	sbc	r14, r1
 22a:	f1 08       	sbc	r15, r1
 22c:	c6 0e       	add	r12, r22
 22e:	d7 1e       	adc	r13, r23
 230:	e8 1e       	adc	r14, r24
 232:	f9 1e       	adc	r15, r25
 234:	c1 86       	std	Z+9, r12	; 0x09
 236:	d2 86       	std	Z+10, r13	; 0x0a
 238:	e3 86       	std	Z+11, r14	; 0x0b
 23a:	f4 86       	std	Z+12, r15	; 0x0c
 23c:	04 c0       	rjmp	.+8      	; 0x246 <hal_led_blink+0xbe>
			}
		}
		else
		{
			hal_led_turn_on_off(led_idx,LED_ON);
 23e:	61 e0       	ldi	r22, 0x01	; 1
 240:	01 c0       	rjmp	.+2      	; 0x244 <hal_led_blink+0xbc>
		}
	}
	else
	{
		hal_led_turn_on_off(led_idx,LED_OFF);
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	86 df       	rcall	.-244    	; 0x152 <hal_led_turn_on_off>
	}
	uxos_stop_timer(hal_led_register_id,USER_EVENT_LED_BLINK);
 246:	64 e0       	ldi	r22, 0x04	; 4
 248:	80 91 61 00 	lds	r24, 0x0061
 24c:	25 d3       	rcall	.+1610   	; 0x898 <uxos_stop_timer>
	uxos_set_event(hal_led_register_id,USER_EVENT_LED_BLINK);
 24e:	64 e0       	ldi	r22, 0x04	; 4
 250:	80 91 61 00 	lds	r24, 0x0061

}
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	ff 90       	pop	r15
 25e:	ef 90       	pop	r14
 260:	df 90       	pop	r13
 262:	cf 90       	pop	r12
	else
	{
		hal_led_turn_on_off(led_idx,LED_OFF);
	}
	uxos_stop_timer(hal_led_register_id,USER_EVENT_LED_BLINK);
	uxos_set_event(hal_led_register_id,USER_EVENT_LED_BLINK);
 264:	56 c1       	rjmp	.+684    	; 0x512 <uxos_set_event>

}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	df 90       	pop	r13
 274:	cf 90       	pop	r12
 276:	08 95       	ret

00000278 <process_key_event>:
	
	uxos_start_reload_timer(process_key_id,USER_EVENT_KEY_CHECK,KEY_CHECK_PERIOD);
}

uint8_t process_key_event(uint8_t event_flag)
{	
 278:	cf 93       	push	r28
 27a:	c8 2f       	mov	r28, r24
	
	if (event_flag&SYS_EVENT_MSG) //最高优先级事件检测 SYS_EVENT_MSG
 27c:	87 ff       	sbrs	r24, 7
 27e:	1c c0       	rjmp	.+56     	; 0x2b8 <process_key_event+0x40>
	{
		uxos_msg_t *recv_msg=uxos_search_msg(process_key_id);
 280:	80 91 68 00 	lds	r24, 0x0068
 284:	0d d2       	rcall	.+1050   	; 0x6a0 <uxos_search_msg>
		if (recv_msg)
 286:	00 97       	sbiw	r24, 0x00	; 0
 288:	19 f4       	brne	.+6      	; 0x290 <process_key_event+0x18>
		{
		  return event_flag;//事件标志位不清除 返回
		}
	  }
			
		return event_flag^SYS_EVENT_MSG;
 28a:	80 e8       	ldi	r24, 0x80	; 128
 28c:	8c 0f       	add	r24, r28
 28e:	1b c0       	rjmp	.+54     	; 0x2c6 <process_key_event+0x4e>
	if (event_flag&SYS_EVENT_MSG) //最高优先级事件检测 SYS_EVENT_MSG
	{
		uxos_msg_t *recv_msg=uxos_search_msg(process_key_id);
		if (recv_msg)
		{
			switch(recv_msg->event_flag)
 290:	fc 01       	movw	r30, r24
 292:	21 81       	ldd	r18, Z+1	; 0x01
 294:	23 30       	cpi	r18, 0x03	; 3
 296:	29 f0       	breq	.+10     	; 0x2a2 <process_key_event+0x2a>
 298:	24 30       	cpi	r18, 0x04	; 4
 29a:	39 f4       	brne	.+14     	; 0x2aa <process_key_event+0x32>
			{
				case KEY_PRESS:
				     PORTB^=(1<<5);
				break;
				case KEY_PRESS_HOLD:
				     PORTB^=(1<<4);
 29c:	28 b3       	in	r18, 0x18	; 24
 29e:	30 e1       	ldi	r19, 0x10	; 16
 2a0:	02 c0       	rjmp	.+4      	; 0x2a6 <process_key_event+0x2e>
		if (recv_msg)
		{
			switch(recv_msg->event_flag)
			{
				case KEY_PRESS:
				     PORTB^=(1<<5);
 2a2:	28 b3       	in	r18, 0x18	; 24
 2a4:	30 e2       	ldi	r19, 0x20	; 32
				break;
				case KEY_PRESS_HOLD:
				     PORTB^=(1<<4);
 2a6:	23 27       	eor	r18, r19
 2a8:	28 bb       	out	0x18, r18	; 24
				break;
				default:
				break;			
			}
		uxos_delete_msg(recv_msg);	
 2aa:	09 d2       	rcall	.+1042   	; 0x6be <uxos_delete_msg>
		recv_msg=uxos_search_msg(process_key_id);//是否还有没读取的消息
 2ac:	80 91 68 00 	lds	r24, 0x0068
 2b0:	f7 d1       	rcall	.+1006   	; 0x6a0 <uxos_search_msg>
		if (recv_msg)
 2b2:	89 2b       	or	r24, r25
 2b4:	39 f4       	brne	.+14     	; 0x2c4 <process_key_event+0x4c>
 2b6:	e9 cf       	rjmp	.-46     	; 0x28a <process_key_event+0x12>
		}
	  }
			
		return event_flag^SYS_EVENT_MSG;
	}
 if (event_flag&USER_EVENT_KEY_CHECK)
 2b8:	82 ff       	sbrs	r24, 2
 2ba:	04 c0       	rjmp	.+8      	; 0x2c4 <process_key_event+0x4c>
 {
	 hal_check_key_port();
 2bc:	d7 de       	rcall	.-594    	; 0x6c <hal_check_key_port>
	 return event_flag^USER_EVENT_KEY_CHECK;
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	8c 27       	eor	r24, r28
 2c2:	01 c0       	rjmp	.+2      	; 0x2c6 <process_key_event+0x4e>
 2c4:	8c 2f       	mov	r24, r28
 }
	
return event_flag;	
}
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <leds_init>:
}



void leds_init(uint8_t task_id)
{
 2ca:	cf 93       	push	r28
	process_led_id=task_id;
 2cc:	80 93 69 00 	sts	0x0069, r24
    hal_led_register_for_task(process_led_id);//register perocess_led_event for led
 2d0:	39 df       	rcall	.-398    	; 0x144 <hal_led_register_for_task>
	
	led_control[RED_LED].current_mode=LED_NORMAL_MODE;
 2d2:	c2 e0       	ldi	r28, 0x02	; 2
 2d4:	c0 93 84 00 	sts	0x0084, r28
	led_control[RED_LED].current_state=LED_OFF;
 2d8:	c0 93 85 00 	sts	0x0085, r28
	led_control[RED_LED].bit_in_port=RED_LED_BIT;
 2dc:	10 92 83 00 	sts	0x0083, r1
	hal_led_turn_on_off(RED_LED,LED_ON);
 2e0:	61 e0       	ldi	r22, 0x01	; 1
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	36 df       	rcall	.-404    	; 0x152 <hal_led_turn_on_off>
    led_control[POWER_LED].current_mode=LED_NORMAL_MODE;
 2e6:	c0 93 91 00 	sts	0x0091, r28
    led_control[POWER_LED].current_state=LED_OFF;
 2ea:	c0 93 92 00 	sts	0x0092, r28
    led_control[POWER_LED].bit_in_port=POWER_LED_BIT;
 2ee:	81 e0       	ldi	r24, 0x01	; 1
 2f0:	80 93 90 00 	sts	0x0090, r24
    hal_led_turn_on_off(POWER_LED,LED_ON);
 2f4:	61 e0       	ldi	r22, 0x01	; 1
 2f6:	2d df       	rcall	.-422    	; 0x152 <hal_led_turn_on_off>
	led_control[BLUE_LED].current_mode=LED_NORMAL_MODE;
 2f8:	c0 93 9e 00 	sts	0x009E, r28
	led_control[BLUE_LED].current_state=LED_OFF;
 2fc:	c0 93 9f 00 	sts	0x009F, r28
	led_control[BLUE_LED].bit_in_port=BLUE_LED_BIT;
 300:	c0 93 9d 00 	sts	0x009D, r28
	hal_led_turn_on_off(BLUE_LED,LED_ON);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	82 e0       	ldi	r24, 0x02	; 2
 308:	24 df       	rcall	.-440    	; 0x152 <hal_led_turn_on_off>
	led_control[GRENN_LED].current_mode=LED_NORMAL_MODE;
 30a:	c0 93 ab 00 	sts	0x00AB, r28
	led_control[GRENN_LED].current_state=LED_OFF;
 30e:	c0 93 ac 00 	sts	0x00AC, r28
	led_control[GRENN_LED].bit_in_port=GRENN_LED_BIT;
 312:	83 e0       	ldi	r24, 0x03	; 3
 314:	80 93 aa 00 	sts	0x00AA, r24
	hal_led_turn_on_off(GRENN_LED,LED_ON);
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	1b df       	rcall	.-458    	; 0x152 <hal_led_turn_on_off>
	led_control[RATE_LED].current_mode=LED_NORMAL_MODE;
	led_control[RATE_LED].current_state=LED_OFF;
	led_control[RATE_LED].bit_in_port=RATE_LED_BIT;
	hal_led_turn_on_off(RATE_LED,LED_ON);
*/	
	hal_led_blink(RED_LED,300,40,100);
 31c:	24 e6       	ldi	r18, 0x64	; 100
 31e:	30 e0       	ldi	r19, 0x00	; 0
 320:	48 e2       	ldi	r20, 0x28	; 40
 322:	6c e2       	ldi	r22, 0x2C	; 44
 324:	71 e0       	ldi	r23, 0x01	; 1
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	2f df       	rcall	.-418    	; 0x188 <hal_led_blink>
	hal_led_blink(POWER_LED,200,30,200);
 32a:	28 ec       	ldi	r18, 0xC8	; 200
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	4e e1       	ldi	r20, 0x1E	; 30
 330:	68 ec       	ldi	r22, 0xC8	; 200
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	28 df       	rcall	.-432    	; 0x188 <hal_led_blink>
	hal_led_blink(BLUE_LED,100,20,300);
 338:	2c e2       	ldi	r18, 0x2C	; 44
 33a:	31 e0       	ldi	r19, 0x01	; 1
 33c:	44 e1       	ldi	r20, 0x14	; 20
 33e:	64 e6       	ldi	r22, 0x64	; 100
 340:	70 e0       	ldi	r23, 0x00	; 0
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	21 df       	rcall	.-446    	; 0x188 <hal_led_blink>
	hal_led_blink(GRENN_LED,50,10,400);
 346:	20 e9       	ldi	r18, 0x90	; 144
 348:	31 e0       	ldi	r19, 0x01	; 1
 34a:	4a e0       	ldi	r20, 0x0A	; 10
 34c:	62 e3       	ldi	r22, 0x32	; 50
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	83 e0       	ldi	r24, 0x03	; 3
 352:	1a df       	rcall	.-460    	; 0x188 <hal_led_blink>
	
	DDRB=0xff;
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	87 bb       	out	0x17, r24	; 23
	PORTB=0xff;
 358:	88 bb       	out	0x18, r24	; 24

	uxos_start_reload_timer(process_led_id,USER_EVENT_LED_OFF,10000);
 35a:	40 e1       	ldi	r20, 0x10	; 16
 35c:	57 e2       	ldi	r21, 0x27	; 39
 35e:	62 e0       	ldi	r22, 0x02	; 2
 360:	80 91 69 00 	lds	r24, 0x0069
}
 364:	cf 91       	pop	r28
	hal_led_blink(GRENN_LED,50,10,400);
	
	DDRB=0xff;
	PORTB=0xff;

	uxos_start_reload_timer(process_led_id,USER_EVENT_LED_OFF,10000);
 366:	86 c2       	rjmp	.+1292   	; 0x874 <uxos_start_reload_timer>

00000368 <led_update>:
}


void led_update()
{
 368:	4f 92       	push	r4
 36a:	5f 92       	push	r5
 36c:	6f 92       	push	r6
 36e:	7f 92       	push	r7
 370:	8f 92       	push	r8
 372:	9f 92       	push	r9
 374:	af 92       	push	r10
 376:	bf 92       	push	r11
 378:	cf 92       	push	r12
 37a:	df 92       	push	r13
 37c:	ef 92       	push	r14
 37e:	ff 92       	push	r15
 380:	0f 93       	push	r16
 382:	1f 93       	push	r17
 384:	cf 93       	push	r28
 386:	df 93       	push	r29
 388:	c4 e8       	ldi	r28, 0x84	; 132
 38a:	d0 e0       	ldi	r29, 0x00	; 0
 38c:	85 e8       	ldi	r24, 0x85	; 133
 38e:	a8 2e       	mov	r10, r24
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	b8 2e       	mov	r11, r24
	uint16_t wait_clock;
	uint16_t min_wait=0xffff;
	uint32_t current_clock;
for (uint8_t led_idx=0;led_idx<LEDS_MAX;led_idx++)
 394:	81 2c       	mov	r8, r1


void led_update()
{
	uint16_t wait_clock;
	uint16_t min_wait=0xffff;
 396:	0f ef       	ldi	r16, 0xFF	; 255
 398:	1f ef       	ldi	r17, 0xFF	; 255
				min_wait=wait_clock;
			}				
	 }
	else
	{
	 led_control[led_idx].current_mode=LED_NORMAL_MODE;
 39a:	92 e0       	ldi	r25, 0x02	; 2
 39c:	99 2e       	mov	r9, r25
	uint16_t wait_clock;
	uint16_t min_wait=0xffff;
	uint32_t current_clock;
for (uint8_t led_idx=0;led_idx<LEDS_MAX;led_idx++)
{  
	if (led_control[led_idx].current_mode==LED_BLINK_MODE)
 39e:	88 81       	ld	r24, Y
 3a0:	81 30       	cpi	r24, 0x01	; 1
 3a2:	09 f0       	breq	.+2      	; 0x3a6 <led_update+0x3e>
 3a4:	4f c0       	rjmp	.+158    	; 0x444 <led_update+0xdc>
	{
		if (led_control[led_idx].remain_changes>0)
 3a6:	8a 81       	ldd	r24, Y+2	; 0x02
 3a8:	9b 81       	ldd	r25, Y+3	; 0x03
 3aa:	89 2b       	or	r24, r25
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <led_update+0x48>
 3ae:	49 c0       	rjmp	.+146    	; 0x442 <led_update+0xda>
		{
			ENTER_CRITICAL_SECTION();
 3b0:	f8 94       	cli
			current_clock=uxos_get_sysclock();
 3b2:	fe d1       	rcall	.+1020   	; 0x7b0 <uxos_get_sysclock>
 3b4:	6b 01       	movw	r12, r22
 3b6:	7c 01       	movw	r14, r24
			EXIT_CRITICAL_SECTION();
 3b8:	78 94       	sei
			if (current_clock>=led_control[led_idx].next)
 3ba:	88 85       	ldd	r24, Y+8	; 0x08
 3bc:	99 85       	ldd	r25, Y+9	; 0x09
 3be:	aa 85       	ldd	r26, Y+10	; 0x0a
 3c0:	bb 85       	ldd	r27, Y+11	; 0x0b
 3c2:	c8 16       	cp	r12, r24
 3c4:	d9 06       	cpc	r13, r25
 3c6:	ea 06       	cpc	r14, r26
 3c8:	fb 06       	cpc	r15, r27
 3ca:	a0 f1       	brcs	.+104    	; 0x434 <led_update+0xcc>
			{
				led_control[led_idx].remain_changes--;
 3cc:	8a 81       	ldd	r24, Y+2	; 0x02
 3ce:	9b 81       	ldd	r25, Y+3	; 0x03
 3d0:	01 97       	sbiw	r24, 0x01	; 1
 3d2:	9b 83       	std	Y+3, r25	; 0x03
 3d4:	8a 83       	std	Y+2, r24	; 0x02
				if (led_control[led_idx].current_state==LED_ON)
 3d6:	f5 01       	movw	r30, r10
 3d8:	80 81       	ld	r24, Z
 3da:	81 30       	cpi	r24, 0x01	; 1
 3dc:	e9 f4       	brne	.+58     	; 0x418 <led_update+0xb0>
				{
					hal_led_turn_on_off(led_idx,LED_OFF);
 3de:	62 e0       	ldi	r22, 0x02	; 2
 3e0:	88 2d       	mov	r24, r8
 3e2:	b7 de       	rcall	.-658    	; 0x152 <hal_led_turn_on_off>
					led_control[led_idx].next=current_clock+led_control[led_idx].period-led_control[led_idx].on_time;
 3e4:	4e 81       	ldd	r20, Y+6	; 0x06
 3e6:	5f 81       	ldd	r21, Y+7	; 0x07
 3e8:	2a 01       	movw	r4, r20
 3ea:	61 2c       	mov	r6, r1
 3ec:	71 2c       	mov	r7, r1
 3ee:	2c 81       	ldd	r18, Y+4	; 0x04
 3f0:	3d 81       	ldd	r19, Y+5	; 0x05
 3f2:	42 1a       	sub	r4, r18
 3f4:	53 0a       	sbc	r5, r19
 3f6:	61 08       	sbc	r6, r1
 3f8:	71 08       	sbc	r7, r1
 3fa:	4c 0c       	add	r4, r12
 3fc:	5d 1c       	adc	r5, r13
 3fe:	6e 1c       	adc	r6, r14
 400:	7f 1c       	adc	r7, r15
 402:	48 86       	std	Y+8, r4	; 0x08
 404:	59 86       	std	Y+9, r5	; 0x09
 406:	6a 86       	std	Y+10, r6	; 0x0a
 408:	7b 86       	std	Y+11, r7	; 0x0b
					wait_clock=led_control[led_idx].period-led_control[led_idx].on_time;
 40a:	42 1b       	sub	r20, r18
 40c:	53 0b       	sbc	r21, r19
 40e:	40 17       	cp	r20, r16
 410:	51 07       	cpc	r21, r17
 412:	c0 f4       	brcc	.+48     	; 0x444 <led_update+0xdc>
 414:	8a 01       	movw	r16, r20
 416:	16 c0       	rjmp	.+44     	; 0x444 <led_update+0xdc>
					if(wait_clock<=min_wait)
					min_wait=wait_clock;
				}
				else
				{
					hal_led_turn_on_off(led_idx,LED_ON);
 418:	61 e0       	ldi	r22, 0x01	; 1
 41a:	88 2d       	mov	r24, r8
 41c:	9a de       	rcall	.-716    	; 0x152 <hal_led_turn_on_off>
					led_control[led_idx].next=current_clock+led_control[led_idx].on_time;
 41e:	8c 81       	ldd	r24, Y+4	; 0x04
 420:	9d 81       	ldd	r25, Y+5	; 0x05
 422:	c8 0e       	add	r12, r24
 424:	d9 1e       	adc	r13, r25
 426:	e1 1c       	adc	r14, r1
 428:	f1 1c       	adc	r15, r1
 42a:	c8 86       	std	Y+8, r12	; 0x08
 42c:	d9 86       	std	Y+9, r13	; 0x09
 42e:	ea 86       	std	Y+10, r14	; 0x0a
 430:	fb 86       	std	Y+11, r15	; 0x0b
 432:	02 c0       	rjmp	.+4      	; 0x438 <led_update+0xd0>
					min_wait=wait_clock;
				}
			}
			else
			{
		        wait_clock=led_control[led_idx].next-current_clock;
 434:	8c 19       	sub	r24, r12
 436:	9d 09       	sbc	r25, r13
 438:	80 17       	cp	r24, r16
 43a:	91 07       	cpc	r25, r17
 43c:	18 f4       	brcc	.+6      	; 0x444 <led_update+0xdc>
 43e:	8c 01       	movw	r16, r24
 440:	01 c0       	rjmp	.+2      	; 0x444 <led_update+0xdc>
				min_wait=wait_clock;
			}				
	 }
	else
	{
	 led_control[led_idx].current_mode=LED_NORMAL_MODE;
 442:	98 82       	st	Y, r9
void led_update()
{
	uint16_t wait_clock;
	uint16_t min_wait=0xffff;
	uint32_t current_clock;
for (uint8_t led_idx=0;led_idx<LEDS_MAX;led_idx++)
 444:	83 94       	inc	r8
 446:	2d 96       	adiw	r28, 0x0d	; 13
 448:	fd e0       	ldi	r31, 0x0D	; 13
 44a:	af 0e       	add	r10, r31
 44c:	b1 1c       	adc	r11, r1
 44e:	84 e0       	ldi	r24, 0x04	; 4
 450:	88 12       	cpse	r8, r24
 452:	a5 cf       	rjmp	.-182    	; 0x39e <led_update+0x36>
	 	
	}//end of 	if (led_control[led_idx].remain_changes>0)	
  }//end of if (led_control[led_idx].current_mode==LED_BLINK_MODE)
  	
 }//end of for(...)	
  if (min_wait!=0xffff)
 454:	0f 3f       	cpi	r16, 0xFF	; 255
 456:	ef ef       	ldi	r30, 0xFF	; 255
 458:	1e 07       	cpc	r17, r30
 45a:	a9 f0       	breq	.+42     	; 0x486 <__stack+0x27>
  {
	 uxos_start_timer(process_led_id,USER_EVENT_LED_BLINK,min_wait);//reset the timer
 45c:	a8 01       	movw	r20, r16
 45e:	64 e0       	ldi	r22, 0x04	; 4
 460:	80 91 69 00 	lds	r24, 0x0069
  }	
}
 464:	df 91       	pop	r29
 466:	cf 91       	pop	r28
 468:	1f 91       	pop	r17
 46a:	0f 91       	pop	r16
 46c:	ff 90       	pop	r15
 46e:	ef 90       	pop	r14
 470:	df 90       	pop	r13
 472:	cf 90       	pop	r12
 474:	bf 90       	pop	r11
 476:	af 90       	pop	r10
 478:	9f 90       	pop	r9
 47a:	8f 90       	pop	r8
 47c:	7f 90       	pop	r7
 47e:	6f 90       	pop	r6
 480:	5f 90       	pop	r5
 482:	4f 90       	pop	r4
  }//end of if (led_control[led_idx].current_mode==LED_BLINK_MODE)
  	
 }//end of for(...)	
  if (min_wait!=0xffff)
  {
	 uxos_start_timer(process_led_id,USER_EVENT_LED_BLINK,min_wait);//reset the timer
 484:	ee c1       	rjmp	.+988    	; 0x862 <uxos_start_timer>
  }	
}
 486:	df 91       	pop	r29
 488:	cf 91       	pop	r28
 48a:	1f 91       	pop	r17
 48c:	0f 91       	pop	r16
 48e:	ff 90       	pop	r15
 490:	ef 90       	pop	r14
 492:	df 90       	pop	r13
 494:	cf 90       	pop	r12
 496:	bf 90       	pop	r11
 498:	af 90       	pop	r10
 49a:	9f 90       	pop	r9
 49c:	8f 90       	pop	r8
 49e:	7f 90       	pop	r7
 4a0:	6f 90       	pop	r6
 4a2:	5f 90       	pop	r5
 4a4:	4f 90       	pop	r4
 4a6:	08 95       	ret

000004a8 <process_led_event>:


uint8_t process_led_event(uint8_t event_flag)
{
 4a8:	cf 93       	push	r28
 4aa:	c8 2f       	mov	r28, r24
	if (event_flag&SYS_EVENT_MSG)
 4ac:	87 ff       	sbrs	r24, 7
 4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <process_led_event+0xe>
	{
		
		return event_flag^SYS_EVENT_MSG;
 4b0:	80 e8       	ldi	r24, 0x80	; 128
 4b2:	8c 0f       	add	r24, r28
 4b4:	09 c0       	rjmp	.+18     	; 0x4c8 <process_led_event+0x20>
	}
	if (event_flag&USER_EVENT_LED_BLINK)
 4b6:	82 ff       	sbrs	r24, 2
 4b8:	03 c0       	rjmp	.+6      	; 0x4c0 <process_led_event+0x18>
	{
		led_update();
 4ba:	56 df       	rcall	.-340    	; 0x368 <led_update>
		return event_flag^USER_EVENT_LED_BLINK;
 4bc:	84 e0       	ldi	r24, 0x04	; 4
 4be:	03 c0       	rjmp	.+6      	; 0x4c6 <process_led_event+0x1e>
	}
	if (event_flag&USER_EVENT_LED_OFF)
 4c0:	81 ff       	sbrs	r24, 1
 4c2:	02 c0       	rjmp	.+4      	; 0x4c8 <process_led_event+0x20>
	{	
		return event_flag^USER_EVENT_LED_OFF;
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	8c 27       	eor	r24, r28
	}
 return event_flag;
}
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <keys_init>:


void keys_init(uint8_t task_id)
{
	process_key_id=task_id;
 4cc:	80 93 68 00 	sts	0x0068, r24
	hal_key_register_for_task(process_key_id);
 4d0:	c6 dd       	rcall	.-1140   	; 0x5e <hal_key_register_for_task>
	
	KEY_DDR&=~(1<<KEY_FUNC_SET_BIT|1<<KEY_FUNC_ADD_BIT);
 4d2:	87 b3       	in	r24, 0x17	; 23
 4d4:	8f 73       	andi	r24, 0x3F	; 63
 4d6:	87 bb       	out	0x17, r24	; 23
	KEY_PORT|=(1<<KEY_FUNC_SET_BIT)|(1<<KEY_FUNC_ADD_BIT);
 4d8:	88 b3       	in	r24, 0x18	; 24
 4da:	80 6c       	ori	r24, 0xC0	; 192
 4dc:	88 bb       	out	0x18, r24	; 24
	
	key_control[KEY_FUNC_SET].state=KEY_DOWN_UP;
 4de:	82 e0       	ldi	r24, 0x02	; 2
 4e0:	80 93 78 00 	sts	0x0078, r24
	key_control[KEY_FUNC_SET].value=KEY_FUNC_SET_VALUE;
 4e4:	90 e4       	ldi	r25, 0x40	; 64
 4e6:	90 93 77 00 	sts	0x0077, r25
	
	key_control[KEY_FUNC_ADD].state=KEY_DOWN_UP;
 4ea:	80 93 7e 00 	sts	0x007E, r24
	key_control[KEY_FUNC_ADD].value=KEY_FUNC_ADD_VALUE;
 4ee:	80 e8       	ldi	r24, 0x80	; 128
 4f0:	80 93 7d 00 	sts	0x007D, r24
	
	uxos_start_reload_timer(process_key_id,USER_EVENT_KEY_CHECK,KEY_CHECK_PERIOD);
 4f4:	42 e3       	ldi	r20, 0x32	; 50
 4f6:	50 e0       	ldi	r21, 0x00	; 0
 4f8:	64 e0       	ldi	r22, 0x04	; 4
 4fa:	80 91 68 00 	lds	r24, 0x0068
 4fe:	ba c1       	rjmp	.+884    	; 0x874 <uxos_start_reload_timer>

00000500 <uxos_tasks_init>:
extern key_control_t key_control[];

void uxos_tasks_init()
{
  uint8_t task_id=0;
  leds_init(task_id++);
 500:	80 e0       	ldi	r24, 0x00	; 0
 502:	e3 de       	rcall	.-570    	; 0x2ca <leds_init>
  keys_init(task_id++);	
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	e2 cf       	rjmp	.-60     	; 0x4cc <keys_init>

00000508 <main>:
#include "uxos_timer.h"

int main()
{

uxos_init();
 508:	10 d0       	rcall	.+32     	; 0x52a <uxos_init>
uxos_start();
 50a:	15 d0       	rcall	.+42     	; 0x536 <uxos_start>

 return 0;
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	08 95       	ret

00000512 <uxos_set_event>:


void uxos_set_event(uint8_t task_id,uint8_t set_event)
{
 
 if (task_id<tasks_count)
 512:	90 91 62 00 	lds	r25, 0x0062
 516:	89 17       	cp	r24, r25
 518:	38 f4       	brcc	.+14     	; 0x528 <uxos_set_event+0x16>
 {
	 task_event[task_id]|=set_event;
 51a:	e8 2f       	mov	r30, r24
 51c:	f0 e0       	ldi	r31, 0x00	; 0
 51e:	e9 54       	subi	r30, 0x49	; 73
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	80 81       	ld	r24, Z
 524:	86 2b       	or	r24, r22
 526:	80 83       	st	Z, r24
 528:	08 95       	ret

0000052a <uxos_init>:
	} 
		
}
void uxos_init()
{
	UXOS_DISABLE_GLOBLE_INT();
 52a:	f8 94       	cli
	uxos_mem_init();//clear ram
 52c:	84 d0       	rcall	.+264    	; 0x636 <uxos_mem_init>
	uxos_tasks_init();//user to do
 52e:	e8 df       	rcall	.-48     	; 0x500 <uxos_tasks_init>
	uxos_timer_init();
 530:	29 d1       	rcall	.+594    	; 0x784 <uxos_timer_init>
	UXOS_ENABLE_GLOBLE_INT();
 532:	78 94       	sei
 534:	08 95       	ret

00000536 <uxos_start>:
}
void uxos_start()
{	
 536:	cf 93       	push	r28
 538:	df 93       	push	r29
 53a:	00 d0       	rcall	.+0      	; 0x53c <uxos_start+0x6>
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 uint8_t task_id=0;
  do 
  {
	if (task_event[task_id])
	break;	
  } while (++task_id<tasks_count);
 540:	80 91 62 00 	lds	r24, 0x0062
 544:	a7 eb       	ldi	r26, 0xB7	; 183
 546:	b0 e0       	ldi	r27, 0x00	; 0
}

static void uxos_event_poll()
{
 uint8_t temp_event;
 uint8_t task_id=0;
 548:	e0 e0       	ldi	r30, 0x00	; 0
  do 
  {
	if (task_event[task_id])
 54a:	9d 91       	ld	r25, X+
 54c:	91 11       	cpse	r25, r1
 54e:	03 c0       	rjmp	.+6      	; 0x556 <uxos_start+0x20>
	break;	
  } while (++task_id<tasks_count);
 550:	ef 5f       	subi	r30, 0xFF	; 255
 552:	e8 17       	cp	r30, r24
 554:	d0 f3       	brcs	.-12     	; 0x54a <uxos_start+0x14>
  
 if (task_id<tasks_count)
 556:	e8 17       	cp	r30, r24
 558:	98 f4       	brcc	.+38     	; 0x580 <uxos_start+0x4a>
  {
	temp_event=task_event[task_id];
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	8f 01       	movw	r16, r30
 55e:	09 54       	subi	r16, 0x49	; 73
 560:	1f 4f       	sbci	r17, 0xFF	; 255
 562:	d8 01       	movw	r26, r16
 564:	8c 91       	ld	r24, X
	task_event[task_id]=0;
 566:	1c 92       	st	X, r1
	temp_event=task_list[task_id](temp_event);	
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	ed 59       	subi	r30, 0x9D	; 157
 56e:	ff 4f       	sbci	r31, 0xFF	; 255
 570:	01 90       	ld	r0, Z+
 572:	f0 81       	ld	r31, Z
 574:	e0 2d       	mov	r30, r0
 576:	09 95       	icall
	task_event[task_id]|=temp_event;	
 578:	f8 01       	movw	r30, r16
 57a:	90 81       	ld	r25, Z
 57c:	98 2b       	or	r25, r24
 57e:	90 83       	st	Z, r25

static void uxos_update_sysclock()
{

	uint16_t temp_overflow_count;
	ENTER_CRITICAL_SECTION();
 580:	f8 94       	cli
	temp_overflow_count=uxos_get_overflow();
 582:	11 d1       	rcall	.+546    	; 0x7a6 <uxos_get_overflow>
	EXIT_CRITICAL_SECTION();
 584:	78 94       	sei
	if (temp_overflow_count>0)
 586:	00 97       	sbiw	r24, 0x00	; 0
 588:	d9 f2       	breq	.-74     	; 0x540 <uxos_start+0xa>
	{
		ENTER_CRITICAL_SECTION();
 58a:	f8 94       	cli
		uxos_clear_overflow();
 58c:	89 83       	std	Y+1, r24	; 0x01
 58e:	9a 83       	std	Y+2, r25	; 0x02
 590:	05 d1       	rcall	.+522    	; 0x79c <uxos_clear_overflow>
		EXIT_CRITICAL_SECTION();
 592:	78 94       	sei
		uxos_timer_update(temp_overflow_count);
 594:	89 81       	ldd	r24, Y+1	; 0x01
 596:	9a 81       	ldd	r25, Y+2	; 0x02
 598:	90 d1       	rcall	.+800    	; 0x8ba <uxos_timer_update>
 59a:	d2 cf       	rjmp	.-92     	; 0x540 <uxos_start+0xa>

0000059c <uxos_mem_alloc>:
{
	
	uint16_t offset=0;
	uint16_t bytes_count=0;
	
	if (mem_size <=0 ||mem_size >= UXOS_MEM_SIZE)
 59c:	9c 01       	movw	r18, r24
 59e:	21 50       	subi	r18, 0x01	; 1
 5a0:	31 09       	sbc	r19, r1
 5a2:	2f 31       	cpi	r18, 0x1F	; 31
 5a4:	33 40       	sbci	r19, 0x03	; 3
 5a6:	18 f0       	brcs	.+6      	; 0x5ae <uxos_mem_alloc+0x12>
	{
		return null_ptr;
 5a8:	80 e0       	ldi	r24, 0x00	; 0
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	08 95       	ret
	}
	if (pmem_head==null_ptr)
 5ae:	20 91 6a 00 	lds	r18, 0x006A
 5b2:	30 91 6b 00 	lds	r19, 0x006B
 5b6:	23 2b       	or	r18, r19
 5b8:	31 f4       	brne	.+12     	; 0x5c6 <uxos_mem_alloc+0x2a>
	{
	  pmem_head=(uint8_t*)UXOS_MEM_START_ADDR;
 5ba:	20 ec       	ldi	r18, 0xC0	; 192
 5bc:	30 e0       	ldi	r19, 0x00	; 0
 5be:	30 93 6b 00 	sts	0x006B, r19
 5c2:	20 93 6a 00 	sts	0x006A, r18
	}

	while (offset< UXOS_MEM_SIZE)
	{		
	 if(*(pmem_head+offset)==0)
 5c6:	60 91 6a 00 	lds	r22, 0x006A
 5ca:	70 91 6b 00 	lds	r23, 0x006B
 5ce:	40 e0       	ldi	r20, 0x00	; 0
 5d0:	50 e0       	ldi	r21, 0x00	; 0
 5d2:	20 e0       	ldi	r18, 0x00	; 0
 5d4:	30 e0       	ldi	r19, 0x00	; 0
	 {
		 bytes_count++;
		 offset++;
	  if (bytes_count==mem_size+1)//one more  byte indicate bytes count;
 5d6:	fc 01       	movw	r30, r24
 5d8:	31 96       	adiw	r30, 0x01	; 1
	  pmem_head=(uint8_t*)UXOS_MEM_START_ADDR;
	}

	while (offset< UXOS_MEM_SIZE)
	{		
	 if(*(pmem_head+offset)==0)
 5da:	db 01       	movw	r26, r22
 5dc:	a2 0f       	add	r26, r18
 5de:	b3 1f       	adc	r27, r19
 5e0:	ac 91       	ld	r26, X
 5e2:	2f 5f       	subi	r18, 0xFF	; 255
 5e4:	3f 4f       	sbci	r19, 0xFF	; 255
 5e6:	a1 11       	cpse	r26, r1
 5e8:	14 c0       	rjmp	.+40     	; 0x612 <uxos_mem_alloc+0x76>
	 {
		 bytes_count++;
 5ea:	4f 5f       	subi	r20, 0xFF	; 255
 5ec:	5f 4f       	sbci	r21, 0xFF	; 255
		 offset++;
	  if (bytes_count==mem_size+1)//one more  byte indicate bytes count;
 5ee:	4e 17       	cp	r20, r30
 5f0:	5f 07       	cpc	r21, r31
 5f2:	99 f4       	brne	.+38     	; 0x61a <uxos_mem_alloc+0x7e>
	   {
		 *(pmem_head+offset-bytes_count)=mem_size;
 5f4:	f9 01       	movw	r30, r18
 5f6:	e4 1b       	sub	r30, r20
 5f8:	f5 0b       	sbc	r31, r21
 5fa:	e6 0f       	add	r30, r22
 5fc:	f7 1f       	adc	r31, r23
 5fe:	80 83       	st	Z, r24
		 return (pmem_head+offset-mem_size);
 600:	28 1b       	sub	r18, r24
 602:	39 0b       	sbc	r19, r25
 604:	80 91 6a 00 	lds	r24, 0x006A
 608:	90 91 6b 00 	lds	r25, 0x006B
 60c:	82 0f       	add	r24, r18
 60e:	93 1f       	adc	r25, r19
 610:	08 95       	ret
	     							
	  }
	  else
	  {
		bytes_count=0;
		offset+=*(pmem_head+offset)+1;
 612:	2a 0f       	add	r18, r26
 614:	31 1d       	adc	r19, r1
		}
	     							
	  }
	  else
	  {
		bytes_count=0;
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	50 e0       	ldi	r21, 0x00	; 0
	if (pmem_head==null_ptr)
	{
	  pmem_head=(uint8_t*)UXOS_MEM_START_ADDR;
	}

	while (offset< UXOS_MEM_SIZE)
 61a:	20 32       	cpi	r18, 0x20	; 32
 61c:	a3 e0       	ldi	r26, 0x03	; 3
 61e:	3a 07       	cpc	r19, r26
 620:	e0 f2       	brcs	.-72     	; 0x5da <uxos_mem_alloc+0x3e>
 622:	c2 cf       	rjmp	.-124    	; 0x5a8 <uxos_mem_alloc+0xc>

00000624 <uxos_mem_set>:
{
	uint8_t *pdata=(uint8_t*)paddr;
	uxos_mem_set(0,pdata-1,len+1);
}
void uxos_mem_set(uint8_t set_value,void *paddr,uint16_t len)
{
 624:	fb 01       	movw	r30, r22
 626:	46 0f       	add	r20, r22
 628:	57 1f       	adc	r21, r23
	uint8_t *pdata=(uint8_t*)paddr;
    while(len--)
 62a:	e4 17       	cp	r30, r20
 62c:	f5 07       	cpc	r31, r21
 62e:	11 f0       	breq	.+4      	; 0x634 <uxos_mem_set+0x10>
	{
		*pdata++=set_value;
 630:	81 93       	st	Z+, r24
 632:	fb cf       	rjmp	.-10     	; 0x62a <uxos_mem_set+0x6>
	}
 634:	08 95       	ret

00000636 <uxos_mem_init>:

uint8_t *pmem_head=null_ptr;

void uxos_mem_init()
{
	uxos_mem_set(0,(uint8_t*)UXOS_MEM_START_ADDR,UXOS_MEM_SIZE);
 636:	40 e2       	ldi	r20, 0x20	; 32
 638:	53 e0       	ldi	r21, 0x03	; 3
 63a:	60 ec       	ldi	r22, 0xC0	; 192
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	f1 cf       	rjmp	.-30     	; 0x624 <uxos_mem_set>

00000642 <uxos_mem_free>:
	}
	 return null_ptr;
   }
 
void uxos_mem_free(void *paddr,uint16_t len)
{
 642:	ab 01       	movw	r20, r22
	uint8_t *pdata=(uint8_t*)paddr;
	uxos_mem_set(0,pdata-1,len+1);
 644:	4f 5f       	subi	r20, 0xFF	; 255
 646:	5f 4f       	sbci	r21, 0xFF	; 255
 648:	bc 01       	movw	r22, r24
 64a:	61 50       	subi	r22, 0x01	; 1
 64c:	71 09       	sbc	r23, r1
 64e:	80 e0       	ldi	r24, 0x00	; 0
 650:	e9 cf       	rjmp	.-46     	; 0x624 <uxos_mem_set>

00000652 <uxos_add_msg>:
}

void uxos_add_msg(uxos_msg_t *pmsg)
{
	uxos_msg_t *psrch_msg;
	if (pmsg_head==null_ptr)
 652:	e0 91 6c 00 	lds	r30, 0x006C
 656:	f0 91 6d 00 	lds	r31, 0x006D
 65a:	30 97       	sbiw	r30, 0x00	; 0
 65c:	29 f4       	brne	.+10     	; 0x668 <uxos_add_msg+0x16>
	{
		pmsg_head=pmsg;
 65e:	90 93 6d 00 	sts	0x006D, r25
 662:	80 93 6c 00 	sts	0x006C, r24
 666:	08 95       	ret
	}
	else
	{
		psrch_msg=pmsg_head;
		while(psrch_msg->next)
 668:	26 81       	ldd	r18, Z+6	; 0x06
 66a:	37 81       	ldd	r19, Z+7	; 0x07
 66c:	21 15       	cp	r18, r1
 66e:	31 05       	cpc	r19, r1
 670:	11 f0       	breq	.+4      	; 0x676 <uxos_add_msg+0x24>
		psrch_msg=psrch_msg->next;
 672:	f9 01       	movw	r30, r18
 674:	f9 cf       	rjmp	.-14     	; 0x668 <uxos_add_msg+0x16>
		psrch_msg->next=pmsg;
 676:	97 83       	std	Z+7, r25	; 0x07
 678:	86 83       	std	Z+6, r24	; 0x06
 67a:	08 95       	ret

0000067c <uxos_send_msg>:

uxos_msg_t *pmsg_head=null_ptr;


void uxos_send_msg(uint8_t task_id,uxos_msg_t *pmsg,uint8_t sys_event)
{
 67c:	1f 93       	push	r17
 67e:	cf 93       	push	r28
 680:	df 93       	push	r29
 682:	1f 92       	push	r1
 684:	cd b7       	in	r28, 0x3d	; 61
 686:	de b7       	in	r29, 0x3e	; 62
 688:	18 2f       	mov	r17, r24
 68a:	cb 01       	movw	r24, r22
    uxos_add_msg(pmsg);
 68c:	49 83       	std	Y+1, r20	; 0x01
 68e:	e1 df       	rcall	.-62     	; 0x652 <uxos_add_msg>
    uxos_set_event(task_id,sys_event);
 690:	49 81       	ldd	r20, Y+1	; 0x01
 692:	64 2f       	mov	r22, r20
 694:	81 2f       	mov	r24, r17
}
 696:	0f 90       	pop	r0
 698:	df 91       	pop	r29
 69a:	cf 91       	pop	r28
 69c:	1f 91       	pop	r17


void uxos_send_msg(uint8_t task_id,uxos_msg_t *pmsg,uint8_t sys_event)
{
    uxos_add_msg(pmsg);
    uxos_set_event(task_id,sys_event);
 69e:	39 cf       	rjmp	.-398    	; 0x512 <uxos_set_event>

000006a0 <uxos_search_msg>:
	}
}
uxos_msg_t *uxos_search_msg(uint8_t task_id )
{
	uxos_msg_t *psrch_msg;
	psrch_msg=pmsg_head;
 6a0:	e0 91 6c 00 	lds	r30, 0x006C
 6a4:	f0 91 6d 00 	lds	r31, 0x006D
	
	while(psrch_msg)
 6a8:	30 97       	sbiw	r30, 0x00	; 0
 6aa:	39 f0       	breq	.+14     	; 0x6ba <uxos_search_msg+0x1a>
	{
		if (psrch_msg->task_id==task_id)
 6ac:	90 81       	ld	r25, Z
 6ae:	98 17       	cp	r25, r24
 6b0:	21 f0       	breq	.+8      	; 0x6ba <uxos_search_msg+0x1a>
		{
			break;
		}
	 psrch_msg=psrch_msg->next;
 6b2:	06 80       	ldd	r0, Z+6	; 0x06
 6b4:	f7 81       	ldd	r31, Z+7	; 0x07
 6b6:	e0 2d       	mov	r30, r0
 6b8:	f7 cf       	rjmp	.-18     	; 0x6a8 <uxos_search_msg+0x8>
	}	
	 return psrch_msg;
}
 6ba:	cf 01       	movw	r24, r30
 6bc:	08 95       	ret

000006be <uxos_delete_msg>:

void uxos_delete_msg(uxos_msg_t *pmsg)
{
 6be:	ef 92       	push	r14
 6c0:	ff 92       	push	r15
 6c2:	0f 93       	push	r16
 6c4:	1f 93       	push	r17
 6c6:	cf 93       	push	r28
 6c8:	df 93       	push	r29
 6ca:	7c 01       	movw	r14, r24
  uxos_msg_t *pprev_msg=null_ptr;
  uxos_msg_t *psrch_msg=pmsg_head;
 6cc:	c0 91 6c 00 	lds	r28, 0x006C
 6d0:	d0 91 6d 00 	lds	r29, 0x006D
	 return psrch_msg;
}

void uxos_delete_msg(uxos_msg_t *pmsg)
{
  uxos_msg_t *pprev_msg=null_ptr;
 6d4:	00 e0       	ldi	r16, 0x00	; 0
 6d6:	10 e0       	ldi	r17, 0x00	; 0
  uxos_msg_t *psrch_msg=pmsg_head;

	while(psrch_msg)
 6d8:	20 97       	sbiw	r28, 0x00	; 0
 6da:	e1 f0       	breq	.+56     	; 0x714 <uxos_delete_msg+0x56>
	{	
	if (psrch_msg==pmsg)
 6dc:	ce 15       	cp	r28, r14
 6de:	df 05       	cpc	r29, r15
 6e0:	a1 f4       	brne	.+40     	; 0x70a <uxos_delete_msg+0x4c>
 6e2:	9e 81       	ldd	r25, Y+6	; 0x06
 6e4:	8f 81       	ldd	r24, Y+7	; 0x07
	{
		if (pprev_msg==null_ptr)
 6e6:	01 15       	cp	r16, r1
 6e8:	11 05       	cpc	r17, r1
 6ea:	39 f4       	brne	.+14     	; 0x6fa <uxos_delete_msg+0x3c>
		{
			pmsg_head=pmsg->next;
 6ec:	c9 2f       	mov	r28, r25
 6ee:	d8 2f       	mov	r29, r24
 6f0:	d0 93 6d 00 	sts	0x006D, r29
 6f4:	c0 93 6c 00 	sts	0x006C, r28
 6f8:	03 c0       	rjmp	.+6      	; 0x700 <uxos_delete_msg+0x42>
			psrch_msg=pmsg_head;
		}
		else
		{
	    pprev_msg->next=pmsg->next;
 6fa:	f8 01       	movw	r30, r16
 6fc:	96 83       	std	Z+6, r25	; 0x06
 6fe:	87 83       	std	Z+7, r24	; 0x07
		}
	    uxos_mem_free(pmsg,sizeof(uxos_msg_t));
 700:	68 e0       	ldi	r22, 0x08	; 8
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	c7 01       	movw	r24, r14
 706:	9d df       	rcall	.-198    	; 0x642 <uxos_mem_free>
 708:	e7 cf       	rjmp	.-50     	; 0x6d8 <uxos_delete_msg+0x1a>
	 }
	 else
	 {
		pprev_msg=psrch_msg;
		psrch_msg=psrch_msg->next; 
 70a:	8e 01       	movw	r16, r28
 70c:	0e 80       	ldd	r0, Y+6	; 0x06
 70e:	df 81       	ldd	r29, Y+7	; 0x07
 710:	c0 2d       	mov	r28, r0
 712:	e2 cf       	rjmp	.-60     	; 0x6d8 <uxos_delete_msg+0x1a>
     } 
	 
  }
  
 714:	df 91       	pop	r29
 716:	cf 91       	pop	r28
 718:	1f 91       	pop	r17
 71a:	0f 91       	pop	r16
 71c:	ff 90       	pop	r15
 71e:	ef 90       	pop	r14
 720:	08 95       	ret

00000722 <__vector_9>:
	timer0_count=t_count;
	
}

ISR(TIMER0_OVF_vect)
{
 722:	1f 92       	push	r1
 724:	0f 92       	push	r0
 726:	0f b6       	in	r0, 0x3f	; 63
 728:	0f 92       	push	r0
 72a:	11 24       	eor	r1, r1
 72c:	8f 93       	push	r24
 72e:	9f 93       	push	r25
 730:	af 93       	push	r26
 732:	bf 93       	push	r27
	
	TCNT0=timer0_count;//重装定时器 8MHZ -div256-1ms one tick
 734:	80 91 74 00 	lds	r24, 0x0074
 738:	82 bf       	out	0x32, r24	; 50
	timer_overflow_count++;//每一个时钟tick 溢出+1
 73a:	80 91 72 00 	lds	r24, 0x0072
 73e:	90 91 73 00 	lds	r25, 0x0073
 742:	01 96       	adiw	r24, 0x01	; 1
 744:	90 93 73 00 	sts	0x0073, r25
 748:	80 93 72 00 	sts	0x0072, r24
	ugos_system_clock++;
 74c:	80 91 6e 00 	lds	r24, 0x006E
 750:	90 91 6f 00 	lds	r25, 0x006F
 754:	a0 91 70 00 	lds	r26, 0x0070
 758:	b0 91 71 00 	lds	r27, 0x0071
 75c:	01 96       	adiw	r24, 0x01	; 1
 75e:	a1 1d       	adc	r26, r1
 760:	b1 1d       	adc	r27, r1
 762:	80 93 6e 00 	sts	0x006E, r24
 766:	90 93 6f 00 	sts	0x006F, r25
 76a:	a0 93 70 00 	sts	0x0070, r26
 76e:	b0 93 71 00 	sts	0x0071, r27

}
 772:	bf 91       	pop	r27
 774:	af 91       	pop	r26
 776:	9f 91       	pop	r25
 778:	8f 91       	pop	r24
 77a:	0f 90       	pop	r0
 77c:	0f be       	out	0x3f, r0	; 63
 77e:	0f 90       	pop	r0
 780:	1f 90       	pop	r1
 782:	18 95       	reti

00000784 <uxos_timer_init>:
 uint16_t timer_overflow_count=0;
 uint32_t ugos_system_clock=0;

static void mega8_timer0_init(uint8_t clock_mode,uint8_t t_count,uint8_t tint_enable)
{
	TCCR0=(TCCR0&(~0x07))|clock_mode;
 784:	83 b7       	in	r24, 0x33	; 51
 786:	88 7f       	andi	r24, 0xF8	; 248
 788:	84 60       	ori	r24, 0x04	; 4
 78a:	83 bf       	out	0x33, r24	; 51
	TIMSK=(TIMSK&(~0x01))|tint_enable;
 78c:	89 b7       	in	r24, 0x39	; 57
 78e:	81 60       	ori	r24, 0x01	; 1
 790:	89 bf       	out	0x39, r24	; 57
	TCNT0=t_count;
 792:	80 ee       	ldi	r24, 0xE0	; 224
 794:	82 bf       	out	0x32, r24	; 50
	timer0_count=t_count;
 796:	80 93 74 00 	sts	0x0074, r24
 79a:	08 95       	ret

0000079c <uxos_clear_overflow>:
	mega8_timer0_init(TIMER_DIV_XX,TIMER_COUNT_XX,TIMER_I_XX);
}

void uxos_clear_overflow(void)
{
	timer_overflow_count=0;
 79c:	10 92 73 00 	sts	0x0073, r1
 7a0:	10 92 72 00 	sts	0x0072, r1
 7a4:	08 95       	ret

000007a6 <uxos_get_overflow>:
}
uint16_t uxos_get_overflow(void)
{
	return timer_overflow_count;
}	
 7a6:	80 91 72 00 	lds	r24, 0x0072
 7aa:	90 91 73 00 	lds	r25, 0x0073
 7ae:	08 95       	ret

000007b0 <uxos_get_sysclock>:

uint32_t uxos_get_sysclock(void)
{
	return ugos_system_clock;
 7b0:	60 91 6e 00 	lds	r22, 0x006E
 7b4:	70 91 6f 00 	lds	r23, 0x006F
 7b8:	80 91 70 00 	lds	r24, 0x0070
 7bc:	90 91 71 00 	lds	r25, 0x0071
}
 7c0:	08 95       	ret

000007c2 <uxos_find_timer>:
uxos_timer_t *uxos_find_timer( uint8_t task_id, uint8_t event_flag )
{
  uxos_timer_t *srch_timer;

  // Head of the timer list
  srch_timer = ptimer_head;
 7c2:	e0 91 75 00 	lds	r30, 0x0075
 7c6:	f0 91 76 00 	lds	r31, 0x0076

  // Stop when found or at the end
  while ( srch_timer )
 7ca:	30 97       	sbiw	r30, 0x00	; 0
 7cc:	51 f0       	breq	.+20     	; 0x7e2 <uxos_find_timer+0x20>
  {
    if ( srch_timer->event_flag == event_flag &&
 7ce:	92 81       	ldd	r25, Z+2	; 0x02
 7d0:	96 13       	cpse	r25, r22
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <uxos_find_timer+0x18>
 7d4:	93 81       	ldd	r25, Z+3	; 0x03
 7d6:	98 17       	cp	r25, r24
 7d8:	21 f0       	breq	.+8      	; 0x7e2 <uxos_find_timer+0x20>
         srch_timer->task_id == task_id )
      break;

    // Not this one, check another
    srch_timer = srch_timer->next;
 7da:	01 90       	ld	r0, Z+
 7dc:	f0 81       	ld	r31, Z
 7de:	e0 2d       	mov	r30, r0
 7e0:	f4 cf       	rjmp	.-24     	; 0x7ca <uxos_find_timer+0x8>
  }

  return ( srch_timer );
}
 7e2:	cf 01       	movw	r24, r30
 7e4:	08 95       	ret

000007e6 <uxos_add_timer>:
 * @param   timeout
 *
 * @return  uxos_timer_t * - pointer to newly created timer
 */
uxos_timer_t *uxos_add_timer( uint8_t task_id, uint8_t event_flag, uint16_t timeout )
{
 7e6:	0f 93       	push	r16
 7e8:	1f 93       	push	r17
 7ea:	cf 93       	push	r28
 7ec:	df 93       	push	r29
 7ee:	08 2f       	mov	r16, r24
 7f0:	16 2f       	mov	r17, r22
 7f2:	ea 01       	movw	r28, r20
  uxos_timer_t *new_timer;
  uxos_timer_t *srch_timer;

  // Look for an existing timer first
  new_timer = uxos_find_timer( task_id, event_flag );
 7f4:	e6 df       	rcall	.-52     	; 0x7c2 <uxos_find_timer>
 7f6:	fc 01       	movw	r30, r24
  if ( new_timer )
 7f8:	00 97       	sbiw	r24, 0x00	; 0
 7fa:	19 f0       	breq	.+6      	; 0x802 <uxos_add_timer+0x1c>
  {
    // Timer is found - update it.
    new_timer->timeout = timeout;
 7fc:	d5 83       	std	Z+5, r29	; 0x05
 7fe:	c4 83       	std	Z+4, r28	; 0x04
 800:	22 c0       	rjmp	.+68     	; 0x846 <uxos_add_timer+0x60>
    return ( new_timer );
  }
  else
  {
    // New Timer
    new_timer =(uxos_timer_t *) uxos_mem_alloc( sizeof( uxos_timer_t ));
 802:	88 e0       	ldi	r24, 0x08	; 8
 804:	90 e0       	ldi	r25, 0x00	; 0
 806:	ca de       	rcall	.-620    	; 0x59c <uxos_mem_alloc>
 808:	fc 01       	movw	r30, r24

    if ( new_timer )
 80a:	00 97       	sbiw	r24, 0x00	; 0
 80c:	f1 f0       	breq	.+60     	; 0x84a <uxos_add_timer+0x64>
    {
      // Fill in new timer
      new_timer->task_id = task_id;
 80e:	03 83       	std	Z+3, r16	; 0x03
      new_timer->event_flag = event_flag;
 810:	12 83       	std	Z+2, r17	; 0x02
      new_timer->timeout = timeout;
 812:	d5 83       	std	Z+5, r29	; 0x05
 814:	c4 83       	std	Z+4, r28	; 0x04
      new_timer->next = null_ptr;
 816:	11 82       	std	Z+1, r1	; 0x01
 818:	10 82       	st	Z, r1
      new_timer->reload_timeout = 0;
 81a:	17 82       	std	Z+7, r1	; 0x07
 81c:	16 82       	std	Z+6, r1	; 0x06

      // Does the timer list already exist
      if ( ptimer_head == null_ptr )
 81e:	a0 91 75 00 	lds	r26, 0x0075
 822:	b0 91 76 00 	lds	r27, 0x0076
 826:	10 97       	sbiw	r26, 0x00	; 0
 828:	29 f4       	brne	.+10     	; 0x834 <uxos_add_timer+0x4e>
      {
        // Start task list
        ptimer_head = new_timer;
 82a:	90 93 76 00 	sts	0x0076, r25
 82e:	80 93 75 00 	sts	0x0075, r24
 832:	09 c0       	rjmp	.+18     	; 0x846 <uxos_add_timer+0x60>
      {
        // Add it to the end of the timer list
        srch_timer = ptimer_head;

        // Stop at the last record
        while ( srch_timer->next )
 834:	8d 91       	ld	r24, X+
 836:	9c 91       	ld	r25, X
 838:	11 97       	sbiw	r26, 0x01	; 1
 83a:	00 97       	sbiw	r24, 0x00	; 0
 83c:	11 f0       	breq	.+4      	; 0x842 <uxos_add_timer+0x5c>
          srch_timer = srch_timer->next;
 83e:	dc 01       	movw	r26, r24
 840:	f9 cf       	rjmp	.-14     	; 0x834 <uxos_add_timer+0x4e>

        // Add to the list
        srch_timer->next = new_timer;
 842:	ed 93       	st	X+, r30
 844:	fc 93       	st	X, r31
 846:	cf 01       	movw	r24, r30
 848:	02 c0       	rjmp	.+4      	; 0x84e <uxos_add_timer+0x68>
      }

      return ( new_timer );
    }
    else
      return ( (uxos_timer_t *)null_ptr );
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
  }
  return ( (uxos_timer_t *)null_ptr );//消除编译警告
}
 84e:	df 91       	pop	r29
 850:	cf 91       	pop	r28
 852:	1f 91       	pop	r17
 854:	0f 91       	pop	r16
 856:	08 95       	ret

00000858 <uxos_delete_timer>:
 * @return  none
 */
void uxos_delete_timer( uxos_timer_t *pdelete_timer )
{
  // Does the timer list really exist
  if ( pdelete_timer )
 858:	00 97       	sbiw	r24, 0x00	; 0
 85a:	11 f0       	breq	.+4      	; 0x860 <uxos_delete_timer+0x8>
  {
    // Clear the event flag and uxos_timer_update() will delete 
    // the timer from the list.
    pdelete_timer->event_flag = 0;
 85c:	fc 01       	movw	r30, r24
 85e:	12 82       	std	Z+2, r1	; 0x02
 860:	08 95       	ret

00000862 <uxos_start_timer>:
 */
uint8_t uxos_start_timer( uint8_t task_id, uint8_t event_flag, uint16_t timeout )
{
  uxos_timer_t *new_timer;

  ENTER_CRITICAL_SECTION();  // Hold off interrupts.
 862:	f8 94       	cli

  // Add timer
  new_timer = uxos_add_timer( task_id, event_flag, timeout );
 864:	c0 df       	rcall	.-128    	; 0x7e6 <uxos_add_timer>

  EXIT_CRITICAL_SECTION();   // Re-enable interrupts.
 866:	78 94       	sei

  return ( (new_timer != null_ptr) ? SUCCESS : NO_TIMER_AVAIL );
 868:	21 e0       	ldi	r18, 0x01	; 1
 86a:	89 2b       	or	r24, r25
 86c:	09 f0       	breq	.+2      	; 0x870 <uxos_start_timer+0xe>
 86e:	20 e0       	ldi	r18, 0x00	; 0
}
 870:	82 2f       	mov	r24, r18
 872:	08 95       	ret

00000874 <uxos_start_reload_timer>:
 * @param   UNINT16 timeout - in milliseconds.
 *
 * @return  SUCCESS, or NO_TIMER_AVAIL.
 */
uint8_t uxos_start_reload_timer( uint8_t task_id, uint8_t event_flag, uint16_t timeout )
{
 874:	cf 93       	push	r28
 876:	df 93       	push	r29
 878:	ea 01       	movw	r28, r20
  uxos_timer_t *new_timer;

  ENTER_CRITICAL_SECTION();  // Hold off interrupts.
 87a:	f8 94       	cli

  // Add timer
  new_timer = uxos_add_timer( task_id, event_flag, timeout );
 87c:	b4 df       	rcall	.-152    	; 0x7e6 <uxos_add_timer>
 87e:	fc 01       	movw	r30, r24
  if ( new_timer )
 880:	00 97       	sbiw	r24, 0x00	; 0
 882:	11 f0       	breq	.+4      	; 0x888 <uxos_start_reload_timer+0x14>
  {
    // Load the reload timeout value
    new_timer->reload_timeout = timeout;
 884:	d7 83       	std	Z+7, r29	; 0x07
 886:	c6 83       	std	Z+6, r28	; 0x06
  }

  EXIT_CRITICAL_SECTION();   // Re-enable interrupts.
 888:	78 94       	sei

  return ( (new_timer != null_ptr) ? SUCCESS : NO_TIMER_AVAIL );
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	ef 2b       	or	r30, r31
 88e:	09 f0       	breq	.+2      	; 0x892 <uxos_start_reload_timer+0x1e>
 890:	80 e0       	ldi	r24, 0x00	; 0
}
 892:	df 91       	pop	r29
 894:	cf 91       	pop	r28
 896:	08 95       	ret

00000898 <uxos_stop_timer>:
 * @param   uint16_t event_flag - identifier of the timer that is to be stopped
 *
 * @return  SUCCESS or INVALID_EVENT_ID
 */
uint8_t uxos_stop_timer( uint8_t task_id, uint8_t event_flag )
{
 898:	cf 93       	push	r28
 89a:	df 93       	push	r29
  uxos_timer_t *foundTimer;

  ENTER_CRITICAL_SECTION();  // Hold off interrupts.
 89c:	f8 94       	cli

  // Find the timer to stop
  foundTimer = uxos_find_timer( task_id, event_flag );
 89e:	91 df       	rcall	.-222    	; 0x7c2 <uxos_find_timer>
 8a0:	ec 01       	movw	r28, r24
  if ( foundTimer )
 8a2:	00 97       	sbiw	r24, 0x00	; 0
 8a4:	09 f0       	breq	.+2      	; 0x8a8 <uxos_stop_timer+0x10>
  {
    uxos_delete_timer( foundTimer );
 8a6:	d8 df       	rcall	.-80     	; 0x858 <uxos_delete_timer>
  }

  EXIT_CRITICAL_SECTION();   // Re-enable interrupts.
 8a8:	78 94       	sei

  return ( (foundTimer != null_ptr) ? SUCCESS : INVALID_EVENT_ID );
 8aa:	cd 2b       	or	r28, r29
 8ac:	11 f0       	breq	.+4      	; 0x8b2 <uxos_stop_timer+0x1a>
 8ae:	80 e0       	ldi	r24, 0x00	; 0
 8b0:	01 c0       	rjmp	.+2      	; 0x8b4 <uxos_stop_timer+0x1c>
 8b2:	82 e0       	ldi	r24, 0x02	; 2
}
 8b4:	df 91       	pop	r29
 8b6:	cf 91       	pop	r28
 8b8:	08 95       	ret

000008ba <uxos_timer_update>:
 * @param   none
 *
 * @return  none
 *********************************************************************/
void uxos_timer_update( uint16_t update_time )
{
 8ba:	cf 92       	push	r12
 8bc:	df 92       	push	r13
 8be:	ef 92       	push	r14
 8c0:	ff 92       	push	r15
 8c2:	0f 93       	push	r16
 8c4:	1f 93       	push	r17
 8c6:	cf 93       	push	r28
 8c8:	df 93       	push	r29
 8ca:	6c 01       	movw	r12, r24
  // Update the system time
  uxos_system_clock += update_time;
  EXIT_CRITICAL_SECTION();   // Re-enable interrupts.
*/
  // Look for open timer slot
  if ( ptimer_head != null_ptr )
 8cc:	c0 91 75 00 	lds	r28, 0x0075
 8d0:	d0 91 76 00 	lds	r29, 0x0076
 8d4:	20 97       	sbiw	r28, 0x00	; 0
 8d6:	09 f4       	brne	.+2      	; 0x8da <uxos_timer_update+0x20>
 8d8:	51 c0       	rjmp	.+162    	; 0x97c <uxos_timer_update+0xc2>
 8da:	e1 2c       	mov	r14, r1
 8dc:	f1 2c       	mov	r15, r1
    // Look for open timer slot
    while ( srch_timer )
    {
      free_timer = null_ptr;
     
      ENTER_CRITICAL_SECTION();  // Hold off interrupts.
 8de:	f8 94       	cli
      
      if (srch_timer->timeout <= update_time)
 8e0:	8c 81       	ldd	r24, Y+4	; 0x04
 8e2:	9d 81       	ldd	r25, Y+5	; 0x05
 8e4:	c8 16       	cp	r12, r24
 8e6:	d9 06       	cpc	r13, r25
 8e8:	18 f0       	brcs	.+6      	; 0x8f0 <uxos_timer_update+0x36>
      {
        srch_timer->timeout = 0;
 8ea:	1d 82       	std	Y+5, r1	; 0x05
 8ec:	1c 82       	std	Y+4, r1	; 0x04
 8ee:	04 c0       	rjmp	.+8      	; 0x8f8 <uxos_timer_update+0x3e>
      }
      else
      {
        srch_timer->timeout = srch_timer->timeout - update_time;
 8f0:	8c 19       	sub	r24, r12
 8f2:	9d 09       	sbc	r25, r13
 8f4:	9d 83       	std	Y+5, r25	; 0x05
 8f6:	8c 83       	std	Y+4, r24	; 0x04
      }
      
      // Check for reloading
      if ( (srch_timer->timeout == 0) && (srch_timer->reload_timeout) && (srch_timer->event_flag) )
 8f8:	8c 81       	ldd	r24, Y+4	; 0x04
 8fa:	9d 81       	ldd	r25, Y+5	; 0x05
 8fc:	89 2b       	or	r24, r25
 8fe:	69 f4       	brne	.+26     	; 0x91a <uxos_timer_update+0x60>
 900:	8e 81       	ldd	r24, Y+6	; 0x06
 902:	9f 81       	ldd	r25, Y+7	; 0x07
 904:	89 2b       	or	r24, r25
 906:	49 f0       	breq	.+18     	; 0x91a <uxos_timer_update+0x60>
 908:	6a 81       	ldd	r22, Y+2	; 0x02
 90a:	66 23       	and	r22, r22
 90c:	31 f0       	breq	.+12     	; 0x91a <uxos_timer_update+0x60>
      {
        // Notify the task of a timeout
        uxos_set_event( srch_timer->task_id, srch_timer->event_flag );
 90e:	8b 81       	ldd	r24, Y+3	; 0x03
 910:	00 de       	rcall	.-1024   	; 0x512 <uxos_set_event>

        // Reload the timer timeout value
        srch_timer->timeout = srch_timer->reload_timeout;
 912:	8e 81       	ldd	r24, Y+6	; 0x06
 914:	9f 81       	ldd	r25, Y+7	; 0x07
 916:	9d 83       	std	Y+5, r25	; 0x05
 918:	8c 83       	std	Y+4, r24	; 0x04
      }
      
      // When timeout or delete (event_flag == 0)
      if ( srch_timer->timeout == 0 || srch_timer->event_flag == 0 )
 91a:	8c 81       	ldd	r24, Y+4	; 0x04
 91c:	9d 81       	ldd	r25, Y+5	; 0x05
 91e:	38 81       	ld	r19, Y
 920:	29 81       	ldd	r18, Y+1	; 0x01
 922:	89 2b       	or	r24, r25
 924:	19 f0       	breq	.+6      	; 0x92c <uxos_timer_update+0x72>
 926:	8a 81       	ldd	r24, Y+2	; 0x02
 928:	81 11       	cpse	r24, r1
 92a:	10 c0       	rjmp	.+32     	; 0x94c <uxos_timer_update+0x92>
      {
        // Take out of list
        if ( prev_timer == null_ptr )
 92c:	e1 14       	cp	r14, r1
 92e:	f1 04       	cpc	r15, r1
 930:	29 f4       	brne	.+10     	; 0x93c <uxos_timer_update+0x82>
          ptimer_head = srch_timer->next;
 932:	30 93 75 00 	sts	0x0075, r19
 936:	20 93 76 00 	sts	0x0076, r18
 93a:	03 c0       	rjmp	.+6      	; 0x942 <uxos_timer_update+0x88>
        else
          prev_timer->next = srch_timer->next;
 93c:	f7 01       	movw	r30, r14
 93e:	30 83       	st	Z, r19
 940:	21 83       	std	Z+1, r18	; 0x01

        // Setup to free memory
        free_timer = srch_timer;

        // Next
        srch_timer = srch_timer->next;
 942:	8e 01       	movw	r16, r28
 944:	09 90       	ld	r0, Y+
 946:	d8 81       	ld	r29, Y
 948:	c0 2d       	mov	r28, r0
 94a:	05 c0       	rjmp	.+10     	; 0x956 <uxos_timer_update+0x9c>
      }
      else
      {
        // Get next
        prev_timer = srch_timer;
        srch_timer = srch_timer->next;
 94c:	7e 01       	movw	r14, r28
 94e:	c3 2f       	mov	r28, r19
 950:	d2 2f       	mov	r29, r18
    prev_timer = (void *)null_ptr;

    // Look for open timer slot
    while ( srch_timer )
    {
      free_timer = null_ptr;
 952:	00 e0       	ldi	r16, 0x00	; 0
 954:	10 e0       	ldi	r17, 0x00	; 0
        // Get next
        prev_timer = srch_timer;
        srch_timer = srch_timer->next;
      }
      
      EXIT_CRITICAL_SECTION();   // Re-enable interrupts.
 956:	78 94       	sei
      
      if ( free_timer )
 958:	01 15       	cp	r16, r1
 95a:	11 05       	cpc	r17, r1
 95c:	61 f0       	breq	.+24     	; 0x976 <uxos_timer_update+0xbc>
      {
        if ( free_timer->timeout == 0 )
 95e:	f8 01       	movw	r30, r16
 960:	84 81       	ldd	r24, Z+4	; 0x04
 962:	95 81       	ldd	r25, Z+5	; 0x05
 964:	89 2b       	or	r24, r25
 966:	19 f4       	brne	.+6      	; 0x96e <uxos_timer_update+0xb4>
        {
          uxos_set_event( free_timer->task_id, free_timer->event_flag );
 968:	62 81       	ldd	r22, Z+2	; 0x02
 96a:	83 81       	ldd	r24, Z+3	; 0x03
 96c:	d2 dd       	rcall	.-1116   	; 0x512 <uxos_set_event>
        }
        uxos_mem_free((uint8_t*) free_timer,sizeof(uxos_timer_t));
 96e:	68 e0       	ldi	r22, 0x08	; 8
 970:	70 e0       	ldi	r23, 0x00	; 0
 972:	c8 01       	movw	r24, r16
 974:	66 de       	rcall	.-820    	; 0x642 <uxos_mem_free>
    // Add it to the end of the timer list
    srch_timer = ptimer_head;
    prev_timer = (void *)null_ptr;

    // Look for open timer slot
    while ( srch_timer )
 976:	20 97       	sbiw	r28, 0x00	; 0
 978:	09 f0       	breq	.+2      	; 0x97c <uxos_timer_update+0xc2>
 97a:	b1 cf       	rjmp	.-158    	; 0x8de <uxos_timer_update+0x24>
        }
        uxos_mem_free((uint8_t*) free_timer,sizeof(uxos_timer_t));
      }
    }
  }
}
 97c:	df 91       	pop	r29
 97e:	cf 91       	pop	r28
 980:	1f 91       	pop	r17
 982:	0f 91       	pop	r16
 984:	ff 90       	pop	r15
 986:	ef 90       	pop	r14
 988:	df 90       	pop	r13
 98a:	cf 90       	pop	r12
 98c:	08 95       	ret

0000098e <__udivmodhi4>:
 98e:	aa 1b       	sub	r26, r26
 990:	bb 1b       	sub	r27, r27
 992:	51 e1       	ldi	r21, 0x11	; 17
 994:	07 c0       	rjmp	.+14     	; 0x9a4 <__udivmodhi4_ep>

00000996 <__udivmodhi4_loop>:
 996:	aa 1f       	adc	r26, r26
 998:	bb 1f       	adc	r27, r27
 99a:	a6 17       	cp	r26, r22
 99c:	b7 07       	cpc	r27, r23
 99e:	10 f0       	brcs	.+4      	; 0x9a4 <__udivmodhi4_ep>
 9a0:	a6 1b       	sub	r26, r22
 9a2:	b7 0b       	sbc	r27, r23

000009a4 <__udivmodhi4_ep>:
 9a4:	88 1f       	adc	r24, r24
 9a6:	99 1f       	adc	r25, r25
 9a8:	5a 95       	dec	r21
 9aa:	a9 f7       	brne	.-22     	; 0x996 <__udivmodhi4_loop>
 9ac:	80 95       	com	r24
 9ae:	90 95       	com	r25
 9b0:	bc 01       	movw	r22, r24
 9b2:	cd 01       	movw	r24, r26
 9b4:	08 95       	ret

000009b6 <_exit>:
 9b6:	f8 94       	cli

000009b8 <__stop_program>:
 9b8:	ff cf       	rjmp	.-2      	; 0x9b8 <__stop_program>
